name: Deploy Pipeline

on:
  push:
    branches:
      - main
      - irinasplayground  # Adjust as needed for feature branch patterns

jobs:
  run-tests:
    name: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Python Setup
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          make create-environment
          source venv/bin/activate
          make requirements
          make dev-setup

      # Uncomment to set up PostgreSQL later in the project
      # - name: Set up PostgreSQL
      #   uses: hyness/postgresql-action@v2
      #   with:
      #       postgresql version: '13'
      #       postgresql db: 'test_db'
      #       postgresql user: 'test_user'
      #       postgresql password: 'test_password'

      - name: Run Tests and Checks
        env:
          AWS_ACCESS_KEY_ID: ${{ github.ref == 'refs/heads/main' && secrets.AWS_ACCESS_KEY_ID || 'test' }}
          AWS_SECRET_ACCESS_KEY: ${{ github.ref == 'refs/heads/main' && secrets.AWS_SECRET_ACCESS_KEY || 'test' }}
          # Uncomment for test database later in the project
          # DATABASE_URL: ${{ github.ref == 'refs/heads/main' && secrets.REAL_DATABASE_URL || 'postgresql://test_user:test_password@localhost:5432/test_db' }}
        run: |
          make run-checks

  deploy-lambda:
    name: deploy-lambda
    runs-on: ubuntu-latest
    needs: run-tests
    # if: github.ref == 'refs/heads/main'  # Only runs for the main branch
    environment: development
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Lambda Layer Packaging
        run: |
          rm -rf layer/python
          mkdir -p layer/python
          mkdir -p .remote_deployment
          pip install -r layer_requirements.txt -t layer/python/
          cd layer
          zip -r ../.remote_deployment/layer_requests.zip python

      - name: Terraform Plan
        working-directory: terraform
        env:
          TF_VAR_openweather_api_key: ${{ secrets.API_KEY }}
          TF_VAR_database_user: ${{ secrets.DB_USER }}
          TF_VAR_database_password: ${{ secrets.DB_PASSWORD }}
        run: terraform plan

      - name: Terraform Apply
        working-directory: terraform
        env:
          TF_VAR_openweather_api_key: ${{ secrets.API_KEY }}
          TF_VAR_database_user: ${{ secrets.DB_USER }}
          TF_VAR_database_password: ${{ secrets.DB_PASSWORD }}
        run: terraform apply -auto-approve
